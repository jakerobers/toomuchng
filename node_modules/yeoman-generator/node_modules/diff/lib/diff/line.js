'use strict';

exports.__esModule = true;
exports.diffLines = diffLines;
exports.diffTrimmedLines = diffTrimmedLines;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var lineDiff = new _base2['default']();
exports.lineDiff = lineDiff;
var trimmedLineDiff = new _base2['default']();
exports.trimmedLineDiff = trimmedLineDiff;
trimmedLineDiff.ignoreTrim = true;

lineDiff.tokenize = trimmedLineDiff.tokenize = function (value) {
  var retLines = [],
      lines = value.split(/^/m);
  for (var i = 0; i < lines.length; i++) {
    var line = lines[i],
        lastLine = lines[i - 1],
        lastLineLastChar = lastLine && lastLine[lastLine.length - 1];

    // Merge lines that may contain windows new lines
    if (line === '\n' && lastLineLastChar === '\r') {
      retLines[retLines.length - 1] = retLines[retLines.length - 1].slice(0, -1) + '\r\n';
    } else {
      if (this.ignoreTrim) {
        line = line.trim();
        // add a newline unless this is the last line.
        if (i < lines.length - 1) {
          line += '\n';
        }
      }
      retLines.push(line);
    }
  }

  return retLines;
};

function diffLines(oldStr, newStr, callback) {
  return lineDiff.diff(oldStr, newStr, callback);
}

function diffTrimmedLines(oldStr, newStr, callback) {
  return trimmedLineDiff.diff(oldStr, newStr, callback);
}
